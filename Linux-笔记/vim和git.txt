vim 
vim   编辑器之神
emacs 神的编辑器
================================================================
三种模式：命令模式、插入/编辑模式、末行模式
插入/编辑模式、末行模式——>命令模式：Esc
注：:q!表示强制退出。
命令模式：
	进入插入/编辑模式：
		a：在当前字符后添加文本
		A：在行末添加文本
		i：在当前字符前插入文本
		I：在行首插入文本
		o：在当前行后面插入一空行
		O：在当前行前面插入一空行

	u: 对修改回退一步
	U: 退回到最初状态
	Ctrl+r:前进一步

	数字+g：跳转到某行
	gg:跳转到第一行
	G:跳转到末行

	yy:复制一行
        数字+yy:复制n行
	p:粘贴
	dd:删除一行/剪切
	数字+dd:从当前行开始剪切n行
	r:修改某个字符，只能修改一次
	x：删除一个字符

	M:光标移动到当前屏幕中央行的第一个字符
	H:光标移动到当前屏幕第一行的第一个字符
	L:光标移动到当前屏幕末行的第一个字符
	0:光标移动到所在行的第一个字符
	$:光标移动到所在行的最后一个字符
	
	可视块：Ctrl+v
	
	sp ：横向分屏
	vs ：竖向分屏
	ctrl+w+上下箭头：切换（建议ctrl+w+w）
	vim file1 file2 多文档编辑
	:next   ：查看下一个文档
	:N      ：查看上一个文档
	:files  ：查看当前打开的所有文档

末行模式：保存、退出、定位、修改、查询
	: : 进入末行模式
	:wq：在命令模式下，执行存盘退出操作
	:w：在命令模式下，执行存盘操作
	:w！：在命令模式下，执行强制存盘操作
	:q：在命令模式下，执行退出vi操作
	:q！：在命令模式下，执行强制退出vi操作
	:e文件名：在命令模式下，打开并编辑指定名称的文件
	:n：在命令模式下，如果同时打开多个文件，则继续编辑下一个文件
	:f：在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例
	:set number：在命令模式下，用于在最左端显示行号
	:set nonumber：在命令模式下，用于在最左端不显示行号
	:X  加密
	:x 写入退出，相当于:wq
	:set nu(number):显示行号
	:set nonu:不显示行号
	:ser nocompatiable:关闭
	:行号 ：跳到某一行
	:.   ：当前行
	:$   ：末行
	:%   ：全局（所有行）
	:/关键字 ：搜索全局匹配到的关键字并高亮显示,按n逐个向下查看，按N逐个向上查看
	:^   :每行开头

	末行模式下的内容替换：
		:s/希望找到的关键字/替换的关键字/:在当前行找到匹配的第一个关键字并替换
		:s/希望找到的关键字/替换的关键字/g:在当前行找到所有匹配关键字并替换
	   例1: :1,6s/bin/linux/g:将1-6行中所有的bin更改为linux
	   例2: :.,$s/lp/lg/g  ：从当前行到最后一行的所有lp改为lg
           例3：:%s/^#//g :删除整个文档每行开头的#
===============================================================================================================
工具linux2dos
让windows自带的文本编辑器正常阅读linux下创建的文本文档，用notepad++无需转换。
==================================================================================================
vundle插件管理器，它本身也是插件，但是通过它可以管理上千个vim的其他插件，通过插件的组合，可以制作属于自己的IDE（集成开发环境）。
在自己的家目录下创建一个mkdir -p .vim/bundle
所有的插件下载后都会安装在这个目录下，包括我们需要下载的vundle。
==================================================================================================
git 最好的版本控制系统
创建一个目录mygit为git的仓库，这个目录用来追踪版本变化（只能跟踪文本文档）。用git init命令初始化该仓库。
[root@1 mygit]# cp /etc/passwd .
[root@1 mygit]# git add passwd （告诉git仓库里多了个passwd文件）
[root@1 mygit]# git commit -m "2017.3.30-1.0"（将仓库中的文件调教，-m为参数信息）
[root@1 mygit]# git diff passwd 

git remote add  名称（origin） 加入远程仓库
git push 名称 master 将本地的修改的内容提交到远端服务器
git pull 名称 master  
git clone              克隆别人的东西
git log                看到最近的仓库内容的修改
git log --online --graph --decorate    合并代码，减少分支数
git reflog             查看历史记录
====================
1.增加远程的仓库
git remote add origin 地址.git   
2.查看仓库是否添加成功
git remote -v      
3.将远程仓库克隆或者下拉到本地
git clone
地址
注意：克隆时得先进入到本地仓库。

在远程仓库上做了修改，希望保证本地和远程版本一致，使用pull下拉
git pull origin master

