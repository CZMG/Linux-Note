正则表达式
正则表达式是用来模糊匹配文本的规则地处理工具。

^tom    匹配开头是tom的内容
bob$    匹配尾部是bob的内容
.       匹配任意一个字符
[]      匹配字符中包含的某一个内容，例:to[am]匹配toa和tom
	[^]     9[^78],不能匹配97和98
	[-]     9[0-6],可以匹配80-86,87不能匹配
?       匹配前面的项目0-1次，例：to?m可以匹配tom和toom
+       匹配前面的项目n次(包括0)
*       匹配前面的项目n次(.*包含没有.)
()      创建一个用于匹配的子串，例:ma(irt)?x可以表示mairtx,max
{n}     [0-9]{3}最多可以表示[0-9][0-9][0-9]
{n,m}   至少匹配n次，最多m次
|       aaa{1st|2nd}匹配aaa1st和aaa2nd

grep sbin.. passwd --color  
grep nologin$ passwd  --color  
grep 'var.*' passwd --color   :          匹配var和var*
grep -E 'nologin.*' passwd  --color  ： +是元字符，需要用-E

*、+ ：贪婪型元字符，匹配时用作最长匹配。
?    : 懒惰匹配，1次。

egrep '^[^as]..' passwd --color

\<     匹配一个单词的开头
\>     匹配一个单词的结尾
\b单词\b  精确定位只包含指定单词的行，前后不含其它字符
=================================================
正则表达式做标签
先定义一个符合规则地标签，然后可以在后面引用这个标签的内容。
\(\)   做标签

\{n\} 对出现的字符进行限制

grep -E和grep -P中可以用\d等同于[0-9]。
==============================================
国际字符
grep "[[:digit:]]" \
=============================================
regexper.com    可视化网站
============================================
邮箱
grep -E '[A-Za-z0-9_]+@[A-Za-z0-9_]+(\.[a-z]+)+' 2.txt --color

==================================================
#MSDN的解释
\            :将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，“n”匹配字符“n”。“\n”匹配换行符。序列“\\”匹配“\”，“\(”匹配“(”。
^            :匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与“\n”或“\r”之后的位置匹配。
$            :匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与“\n”或“\r”之前的位置匹配。
*            :零次或多次匹配前面的字符或子表达式。例如，zo* 匹配“z”和“zoo”。* 等效于 {0,}。
+            :一次或多次匹配前面的字符或子表达式。例如，“zo+”与“zo”和“zoo”匹配，但与“z”不匹配。+ 等效于 {1,}。
?            :零次或一次匹配前面的字符或子表达式。例如，“do(es)?”匹配“do”或“does”中的“do”。? 等效于 {0,1}。
{n}          :n 是非负整数。正好匹配 n 次。例如，“o{2}”与“Bob”中的“o”不匹配，但与“food”中的两个“o”匹配。
{n,}         :n 是非负整数。至少匹配 n 次。例如，“o{2,}”不匹配“Bob”中的“o”，而匹配“foooood”中的所有 o。“o{1,}”等效于“o+”。“o{0,}”等效于“o*”。
{n,m}        :M 和 n 是非负整数，其中 n <= m。匹配至少 n 次，至多 m 次。例如，“o{1,3}”匹配“fooooood”中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。
?            :当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串“oooo”中，“o+?”只匹配单个“o”，而“o+”匹配所有“o”。
.            :匹配除“\n”之外的任何单个字符。若要匹配包括“\n”在内的任意字符，请使用诸如“[\s\S]”之类的模式。
(pattern)    :匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果“匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用“\(”或者“\)”。
(?:pattern)  :匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符 (|) 组合模式部件的情况很有用。例如，'industr(?:y|ies) 是比 'industry|industries' 更经济的表达式。
(?=pattern)  :执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95|98|NT|2000)' 匹配“Windows 2000”中的“Windows”，但不匹配“Windows 3.1”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。
(?!pattern)  :执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95|98|NT|2000)' 匹配“Windows 3.1”中的 “Windows”，但不匹配“Windows 2000”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。
x|y          :匹配 x 或 y。例如，'z|food' 匹配“z”或“food”。'(z|f)ood' 匹配“zood”或“food”。
[xyz]        :字符集。匹配包含的任一字符。例如，“[abc]”匹配“plain”中的“a”。
[^xyz]       :反向字符集。匹配未包含的任何字符。例如，“[^abc]”匹配“plain”中的“p”。
[a-z]        :字符范围。匹配指定范围内的任何字符。例如，“[a-z]”匹配“a”到“z”范围内的任何小写字母。
[^a-z]       :反向范围字符。匹配不在指定的范围内的任何字符。例如，“[^a-z]”匹配任何不在“a”到“z”范围内的任何字符。
\b           :匹配一个字边界，即字与空格间的位置。例如，“er\b”匹配“never”中的“er”，但不匹配“verb”中的“er”。
\B           :非字边界匹配。“er\B”匹配“verb”中的“er”，但不匹配“never”中的“er”。
\cx          :匹配 x 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是“c”字符本身。
\d           :数字字符匹配。等效于 [0-9]。
\D           :非数字字符匹配。等效于 [^0-9]。
\f           :换页符匹配。等效于 \x0c 和 \cL。
\n           :换行符匹配。等效于 \x0a 和 \cJ。
\r           :匹配一个回车符。等效于 \x0d 和 \cM。
\s           :匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。
\S           :匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。
\t           :制表符匹配。与 \x09 和 \cI 等效。
\v           :垂直制表符匹配。与 \x0b 和 \cK 等效。
\w           :匹配任何字类字符，包括下划线。与“[A-Za-z0-9_]”等效。
\W           :与任何非单词字符匹配。与“[^A-Za-z0-9_]”等效。
\xn          :匹配 n，此处的 n 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，“\x41”匹配“A”。“\x041”与“\x04”&“1”等效。允许在正则表达式中使用 ASCII 代码。
\num         :匹配 num，此处的 num 是一个正整数。到捕获匹配的反向引用。例如，“(.)\1”匹配两个连续的相同字符。
\n           :标识一个八进制转义码或反向引用。如果 \n 前面至少有 n 个捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数 (0-7)，那么 n 是八进制转义码。
\nm          :标识一个八进制转义码或反向引用。如果 \nm 前面至少有 nm 个捕获子表达式，那么 nm 是反向引用。如果 \nm 前面至少有 n 个捕获，则 n 是反向引用，后面跟有字符 m。如果两种前面的情况都不存在，则 \nm 匹配八进制值 nm，其中 n 和 m 是八进制数字 (0-7)。
\nml         :当 n 是八进制数 (0-3)，m 和 l 是八进制数 (0-7) 时，匹配八进制转义码 nml。
\un          :匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。例如，\u00A9 匹配版权符号 (©)。
================================================================
sed  （流编辑器）
vim属于屏幕编辑器。
sed优点：一边编辑，一边调用，节省内存。
sed在编辑文件时，首先把文档中的一行读入内存，这行内容我们时可以编辑的，这个内存的行称为模式空间。编辑完成后，这行会输出到屏幕，同时清空模式空间的内容，然后读入下一行，重复。
这种修改默认模式下是不会修改源文件的内容的。

sed语法：
sed 'range command' filename
	常用选项：
        -n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
        -e∶直接在指令列模式上进行 sed 的动作编辑；
        -f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；
        -r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)
        -i∶直接修改读取的档案内容，而不是由萤幕输出。       

常用命令：
        a   ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～
        c   ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
        d   ∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；
         i   ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
         p  ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～
         s  ∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！	

	例：sed '34d' passwd 删除passwd文档的第34行。d是指令，表示删除。
	sed 'd' passwd    删除passwd内的所有内容。
	sed 's/ab/yz/g' 5.txt    讲5.txt中的ab第一行全局替换为yz。
	sed 's/tom/xxxx/2' passwd  将passwd中的含有tom行的第二个tom替换为xxxx
	sed '1s/ /--/2' 1  将1文档中的第一行第二个空格改为--
	sed '1s/redhat/-&-/2' aa   将aa文档中的第一行第二个redhat前后加-。 （&表示引用前面的关键词）
	sed '{s/linux/Linux/;s/Linux/RHEL7/g}' aa  如果对模式空间内的内容进行多次修改，需要使用'{;}'格式。
	sed '1y/id/12' aa        将所有的i变为1，所有的d变为2。针对单个字符的修改，不需要加g。
	sed '/USERCTL/a\IPADDR\=10.1.1.1' aa  在USERCTL行后添加IPADDR=10.1.1.1。（/a是往下添加，/i是往上添加）
	sed '/ONBOOT/c\ONBOOT=no' aa     直接使用/c来修改某一行的内容。

sed -i  修改源文件(没有输出，直接写入源文件)

sed '/^BOOT/{=}' aa     {=}指定行号
sed '/^BOOT/{n;s/yes/no}' aa   n表示读取下一行，首先找出^BOOT内容行，然后读取下一行修改。
sed '/^BOOT/{N;s/yes/no}' aa   N表示读取下面多行，多行模式空间，并且不删除当前空间的行。多行模式空间中使用^不在表示开头，$不表示结尾，分别表示模式空间的开头和结束。

sed '/^$d' aa    删除aa文档中的空行


sed除了模式空间外，还有一个保持空间，其实就是缓存。
========================================================
awk    主要用来对文档进行排版，使用灵活，是shell的又一利器。

cut -d:  -f 4 passwd
$0(当前行)  $1  $2

语法：awk -F: 'range,command1;command2' filename
	-F   指定分隔符
	~    用于匹配正则表达式（~!匹配非正则表达式）

例：awk -F: '$1~/lf/{ print $3 }'  /etc/passwd
    awk 'BEGIN{FS=":";OFS="--"}$1~/lf/{print $3}' /etc/passwd
    ifconfig eth1 |grep "inet addr" |awk '{print $2}' | awk -F: 'BEGIN{print "Server is IP"}{print $2}{print "!"}'
    who | awk '{print NF}'
    who | awk '{print NR}'
    cat /etc/passwd | awk NR==10
    awk -F: 'BEGIN{nologin=0}/nologin/{nologin++}END{print nologin}' /etc/passwd
