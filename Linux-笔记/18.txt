系统远程管理与备份
ssh的使用
telnet rlogin ssh ssh2
ssh root@192.168.130.129 -X  (-X表示打开图形化)
scp xx.sh root@c6:     (加: 表示root@c6是一台远程主机)
rsync 

1、出于安全考虑，实际工作中很少使用账号密码（基于口令的认证）的方式登陆ssh，更多的是通过秘钥的方式
2、更改ssh的默认端口
3、禁止root登陆

基于口令的认证：用户名 密码（短语）
A---------B
A希望和B建立链接，B发送公钥给A，A用B的公钥加密登陆B的密码，B通过私钥验证A的信息，成功就可以放行。
基于秘钥的认证：创建公钥和私钥
A---------B
A和B事先已经通过安全的方式获取对方的公钥，并且存放在本地，A希望和B建立链接。B会随机产生一个数字，用A的公钥加密，再把这个信息发送给A。

ssh-keygen
ssh-copy-id -i id_rsa.pub c6

==========================
爆破工具
hydra
medusa
john(开膛手杰克，破解哈希，shadow)
==========================
ssh 安全
1、密码尽可能强大，最好大于14位，（大小写夹杂，有数字、字母、特殊符号，最好是短语）
2、修改默认端口号（etc/ssh/ssh_config）
3、禁止root登陆
4、lastb,查看登陆用户；
	查看日志 /var/log/btmp（记录了登陆失败的信息）的大小，不断增大说明服务器被攻击。
5、fail2ban的使用
=============================
系统备份

完整备份：备份所有的数据，同时将备份过的文件的属性进行标记，标记为备份。
	优点：数据恢复次数少，任何时间段的数据一次恢复。
	缺点：备份的数据随着时间的增长越来越庞大，耗时间越来越长，资源利用率高。
差异备份：只备份上一次完全备份后增长的数据。对已有备份标记的文件不进行备份，对自身备份的文件也不进行标记。
	缺点：备份的数据随着时间的增长越来越庞大，耗时间越来越长，资源利用率高。
增量备份：备份自上一次备份后有变化的数据。备份后的文件打上标记。
	优点：备份的数据量小，速度快，资源利用率低。
	缺点：数据恢复的次数由备份的次数决定，恢复的次数较多。

一个月做一次完全备份，一个星期做一次差异备份，一天做一次增量备份。

dump  专门用于针对ext日志式文件系统进行备份
xfsdump   专门用于针对xfs日志式文件系统进行备份
以上两个工具是针对整个磁盘进行备份。
备份级别用数字表示，0-9
0  表示完全备份
从低往高表示增量备份
从高往低表示差异备份

例：dump -0u -f 0.dump /dev/sdb1 : 0-完全备份，u-记录备份时间，f-指明备份的设备，/dev/sdb1-备份的磁盘

restore -i -f 3.dump     :交互恢复3.dump内的文件
================================
工具
mkisofs       创建一个iso的文件系统
	mkisofs -o winxp.iso *.dump winxp  将*.dump和winxp打包做成winxp.iso的镜像
	
	mount -o loop winxp.iso   挂在光盘镜像

cpio    归档，也可以用来备份数据，这个工具本身并不知道需要备份的数据有哪些，一般和| 结合使用。
	例：find . -iname \*.dump | cpio -o > test.cpio
	cpio -i < test.cpio
	参数o为归档（打包），i为解档。
=======================================
实时备份
rsync(只传输差异变化)   scp(ssh方式cp) 
数据同步有两种方式：推，拉
拉：从服务器端拉取数据，对服务器的开销很小，完全取决于客户端的操作，不能真正做到同步，非实时，传输速度慢。
推：服务器的开销大，但因为主动方是变化端，所以可以做到同步。
rsync  参数：
	-a  归档模式
	-r  递归
	-b  备份
例子：rsync -azP root@192.168.24.240:/tmp/xx /tmp/yy   从服务器端拉取

inotify 是内核2.6以后自带的一个机制，提供了对文件的事件的监控，比如文件的修改，删除，添加，属性的调整。
/proc/sys/fs/inotify/max_
max_queued_events   ：最大的队列
max_user_instances  ： 最大的实例
max_user_watches    ：每个用户实例最多监控的文件数量

/etc/sysctl.conf : 对linux内核深度的修改。用sysctl -p 生效配置。
RHEL7默认需要手动编写，类似fs.inotify.max_queued_events=32768编写。

inotifywatch 
inotifywait
	-m   监控
	-e   指明事件
	-r   递归
例：inotifywait -mrq -e move,create,delete,modify /test   对目录test产生的事件进行监控，事件有移动，创建，删除

编写脚本
实时同步：monitor.sh
SRC=/tmp/test
DST=root@192.168.24.240:/tmp/xx
inotifywait -mrp  -e move,create,delete,modify ${SRC} | while read line
do
        rsync -azP --delete ${SRC} ${DST}
done    

监控脚本：
pgrep monitor.sh
if [ ! $? ==0 ];then
	/tmp/monitor.sh
fi

无密码登陆
ssh-keygen
ssh-copy-id root@192.168.24.240

开机启动命令
/etc/rc.local
