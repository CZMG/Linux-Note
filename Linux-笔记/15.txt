BASH
shell可以认为是一个命令解释器，由C语言编写。
第一个shell是unix中的sh。
几乎所有的linux发行版中默认的shell都是bash。Linux的发行版默认都是bash。
shell 有很多种，每种都带自己的特定的功能和有点。
sh:AT&T,贝尔实验室，快速，简洁，运维使用。现在一般不使用，一般用在破解密码方面。
bash:整合了csh和ksh的功能。特点：功能强大，欧很多特性对，如：自动补全，拼写更正，颜色分类等，是最常用的的版本。
tcsg:不是标准的shell。
csh:伯克利大学开发的，特性众多，但据说是执行的效率不高
ksh:AT&T开发，功能已经被bash整合。
zsh：终极shell。
powershell：windows下的shell
linux bash 通用，功能较均衡，执行效率快。
================================================================
bc     计算器
echo "scale=10;33/23" | bc              用scale控制计算精度，定义小数点后10位
echo "obase=10;101011" | bc     用obase定义转换的进制，这里转为10进制
	sqrt()                   开根号计算
	^                         幂运算
===========================================================
引号
单引号'' :字符串中被包裹的不论是什么都原样输出，包括变量、特殊符号。
双引号"" :字符串中被包裹的内容除了会被原样显示，还能识别一些特殊的函数符号，如：\，$，` 等。
反引号`` :命令替代作用，将字符串中的某一个被包裹的变为指令（指令存在）。
=========================================================================================
变量
~ ：当前用户的家目录
在bash中，变量使用时基本不需要声明类型，每个变量的值都是字符串。
注：变量不能是数字开头，等号两边不能有空格。

本地变量：只在当前的shell环境中定义，不会影响其他shell或者子shell。
	查看变量一定是用$标记，变量名区分大小写，系统默认的变量一般都是大写。
	xx=24 : 定义变量xx 
	unset xx ： 取消变量xx
	echo $$ : 查看当前shell进程
环境变量：
	\0 :分隔符
	\n :换行符
	export : 查看当前的环境变量
		export xx=24 ： 设置环境变量xx
	env ： 查看当前的环境变量
	declare ：定义环境变量
		-i aa : 定义一个整数型变量
		+i aa : 取消aa的类型
		-r aa : 定义只读变量
位置变量：
	$0 : 执行脚本或指令的名称
	$1 : 第一个参数
	$2 : 第二个参数
	……
	$# : 参数的总个数
	$@ : 显示所有的参数
	$* : 显示所有的参数
	$$ : 显示当前的环境
	$? : 显示上一条命令的执行结果是否为真。真为0，假为1。
	注：查看变量名时用{}表示其内容是一个整体。
==============================================================================================
shell中的read（交互）
read : read 是从系统读取信息，将数据赋值给默认变量REPLY，通过echo $REPLY 读取。
	-s ：没有回显的方式（屏幕上没有任何输出）。
	-t 2 : 限制2秒内输入内容。
	-p "Enter Input" ：指定读取值时的提示符 Enter Input。
	-d : 定义中断符号。如：-d "EOF"。
==============================================================================================
脚本
脚本第一行表示脚本的执行环境：#!/bin/bash,并非注释。
==============================================================================================
set  显示系统中已经存在的shell变量，以及设置shell变量的新变量值
	-u：当执行时使用到未定义过的变量，则显示错误信息。 
	-x：执行指令后，会先显示该指令及所下的参数。
	+u/x:关闭u/x的功能。
==============================================================================================
数组
xx=(aa,bb,cc,dd,ee) : 定义数组xx
echo ${xx[@]} : 查看所有数组
	 ${xx[0]} :  查看数组xx的第一个字符
	 ${!xx[@]} : 查看数组所有字符的下标
	 ${#xx[@]} : 查看数组所有字符的数量
	
关联数组：通过自定义的字符串来建立索引。
	declare -A xx  :  定义一个关联数组的类型
	xx=[name1]=aa [name2]=bb [name3]=cc [name4]=dd : 定义数组
===================================================================================
变量内容的删除、替换
r=${path#*/bin:} : 一个#表示从前往后最短匹配删除，删到/bin为止。
r=${path##*/bin:} : 两个#表示从前往后最长匹配删除，删到/bin为止。
r=${path%bin/*:} : 一个#表示从后往前最短匹配删除，删到/bin为止。
r=${path%%bin/*:} : 两个#表示从后往前最长匹配删除，删到/bin为止。

aa=${xx-"error"} : 若xx这个变量的值存在，则echo $aa 显示xx的值，否则显示error
aa=${xx="error"} : 将error的值赋予xx这个变量
aa=${xx?"error"} :若xx这个变量的值不存在，则显示error的警告信息

注：变量为空值和变量不存在是不同的。
==================================================================================
别名
alias rm=
====================================================================================
/etc/issue : 设置登录前的显示内容
	\d   显示当前时间
	\n   显示网络信息
	\v   显示当前操作系统的信息
======================================================================================
~/.bash_profile  用户登录时执行，设置用户的环境变量，主要配置还是来自~/.bashrc
~/.bashrc      设置用户的bash环境，
/etc/profile     全局设置用户变量
/etc/profile.d/   别名
========================================================================================
通配符
[] : 代表一个字符
[a-z] : 26字母中匹配一个
[a\-z] : 匹配a、-、z
[0-9] : 匹配数字0-9中的一个
[!0-9] :不是数字 
? : 任意一个字符
* : 任意字符，任意长度
===========================================================================================
重定向
/dev/std
stdin  0
stdout 1
stderr 2

输入重定向
> : 输出重定向。（先检查右边的文件是否存在，不存在则创建；存在，则清空内容将新内容写入）。
	>> : 追加，不清空之前的内容，将新内容写入。
注：无论是>还是>>,都只会输出正确地内容。若要定义错误的输入，则使用2>或者2>>。
	假设希望不论正确还是错误的输入，则使用&>。
2>&1 : 将错误的结果当成正确的结果
1>&2 : 将正确地结果当成错误的结果

输出重定向
< : 输入重定向。
wc -l < /etc/passwd     将/etc/passwd的内容按行数进行统计
==================================================================================
here文档： heredoc
直接可以在终端里写文档，例：cat > server.repo <<EOF ,文档以EOF结束。
=====================================================================================
和或
command1 || command2  : 一个为真，整体为真。
command1 && command2  : 两个为真，整体为真。

过滤
grep tom /etc/passwd   : z在/etec/passwd文件中过滤出tom
	-i    : 忽略大小写
	-n    : 显示行号
	-v    : 反向过滤
	--color：带颜色显示
	
管道：将前段命令的输出作为后端命令的依据。

例：last  | cut -d " " -f1
    last  | cut -d " " -f1 | sort -u
    last  | cut -d " " -f1 | uniq -c
	
剪切
cut 剪切 
	-d  ":" :以:为分隔符
	-f1 : 选择第一段

文档的合并
	paste aa bb > xx  将多个文件按照列队列进行合并

文档的切割
split -b 100K 文件名
	  -l      按按行的方式切割


